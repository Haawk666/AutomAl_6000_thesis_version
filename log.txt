GUI: Welcome to AutomAl 6000 by Haakon Tvedt
GUI: GUI version: 0.0.2
GUI: core version: 0.1.0
GUI: Build version: Alpha 1.0
------------------------
GUI: Opening file C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Large_L_phase_control
core: Loaded C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Large_L_phase_control
core: Evaluating advanced species...
core: Advanced species set.
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Large_L_phase_control
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Large_L_phase_control
graph_2: Refreshing graph...
graph_2:     Mapping districts
graph_2:     Calculating vertex parameters
graph_2:     Evaluating species variants
graph_2:     Mapping arcs
graph_2:     Summarizing graph stats
graph_2: Graph refreshed!
GUI: Permute mode is on!
GUI: Permute mode is off!
GUI: Permute mode is on!
GUI: Permute mode is off!
GUI: Permute mode is on!
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Large_L_phase_control
GUI: Permute mode is off!
core: Evaluating advanced species...
core: Advanced species set.
core: Finding particle...
core: Found particle.
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Large_L_phase_control
graph_2: Refreshing graph...
graph_2:     Mapping districts
graph_2:     Calculating vertex parameters
graph_2:     Evaluating species variants
graph_2:     Mapping arcs
graph_2:     Summarizing graph stats
graph_2: Graph refreshed!
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Large_L_phase_control
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/_model_0_Large_L_phase_control
GUI: Opening file C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Medium_Qprime_columns
core: Loaded C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Medium_Qprime_columns
core: Doing the basics...
core: Mapping spatial locality...
column_characterization: Districts mapped in 35.60043525695801 seconds with matrix method.
    Distance calculations took 35.13683724403381 seconds.
    Sorting took 0.46359801292419434 seconds.
core: Spatial mapping complete.
core: Finding edge columns....
column_characterization: Detecting edge columns
column_characterization: Found edge columns in 0.0055315494537353516 seconds
core: Edge columns found.
core: Mapping vertex connectivity...
core: Vertices mapped.
core: Running advanced zeta...
column_characterization: Starting zeta analysis
column_characterization: Zeta analysis completed in 12.329055547714233 seconds
core: zeta's set.
core: Calculating probabilities from alpha attributes...
core: Calculated probabilities from alpha attributes.
core: Mapping vertex connectivity...
core: Vertices mapped.
core: Running advanced zeta...
column_characterization: Starting zeta analysis
column_characterization: Zeta analysis completed in 13.72293210029602 seconds
core: zeta's set.
core: Finding particle...
core: Found particle.
core: Finding normalized intensities...
core: Found intensities.
core: Running untangling algorithm
core: Untnangling complete
core: Running advanced zeta...
column_characterization: Starting zeta analysis
column_characterization: Zeta analysis completed in 13.816043615341187 seconds
core: zeta's set.
core: Basics done
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Medium_Qprime_control
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Medium_Qprime_control
core: Running untangling algorithm
core: Untnangling complete
core: Project summary:
    Atomic Graph summary:
        Scale: 4.705772
        Order: 2528
        Size: 0
        Chi: 0.000
        Average degree: 0.000
        Matrix redshift: 0.000
        Particle redshift: 0.000
        Total redshift: 0.000
    General:
        Number of columns: 2526
    Image:
        Dimension (height, width): (2048, 2048)
        Average pixel intensitiy: 0.23272701483332242

core: Mapping vertex connectivity...
core: Vertices mapped.
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Medium_Qprime_control
GUI: Permute mode is on!
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Medium_Qprime_control
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Medium_Qprime_control
core: Finding particle...
core: Found particle.
core: Finding normalized intensities...
core: Found intensities.
core: Evaluating advanced species...
core: Advanced species set.
graph_2: Refreshing graph...
graph_2:     Mapping districts
graph_2:     Calculating vertex parameters
graph_2:     Evaluating species variants
graph_2:     Mapping arcs
graph_2:     Summarizing graph stats
graph_2: Graph refreshed!
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_Medium_Qprime_control
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/_model_0_Medium_Qprime_control
GUI: Opening file C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_multi_phase_columns
core: Loaded C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_multi_phase_columns
core: Doing the basics...
core: Mapping spatial locality...
column_characterization: Districts mapped in 31.47556734085083 seconds with matrix method.
    Distance calculations took 31.055521488189697 seconds.
    Sorting took 0.4200458526611328 seconds.
core: Spatial mapping complete.
core: Finding edge columns....
column_characterization: Detecting edge columns
column_characterization: Found edge columns in 0.0 seconds
core: Edge columns found.
core: Mapping vertex connectivity...
core: Vertices mapped.
core: Running advanced zeta...
column_characterization: Starting zeta analysis
column_characterization: Zeta analysis completed in 11.272618532180786 seconds
core: zeta's set.
core: Calculating probabilities from alpha attributes...
core: Calculated probabilities from alpha attributes.
core: Mapping vertex connectivity...
core: Vertices mapped.
core: Running advanced zeta...
column_characterization: Starting zeta analysis
column_characterization: Zeta analysis completed in 12.696784019470215 seconds
core: zeta's set.
core: Finding particle...
core: Found particle.
core: Finding normalized intensities...
core: Found intensities.
core: Running untangling algorithm
core: Untnangling complete
core: Running advanced zeta...
column_characterization: Starting zeta analysis
column_characterization: Zeta analysis completed in 12.78007435798645 seconds
core: zeta's set.
core: Basics done
GUI: Permute mode is off!
GUI: Permute mode is on!
GUI: Permute mode is off!
core: Mapping vertex connectivity...
core: Vertices mapped.
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_multi_phase_control
core: Finding particle...
core: Found particle.
core: Finding normalized intensities...
core: Found intensities.
core: Evaluating advanced species...
core: Advanced species set.
graph_2: Refreshing graph...
graph_2:     Mapping districts
graph_2:     Calculating vertex parameters
graph_2:     Evaluating species variants
graph_2:     Mapping arcs
graph_2:     Summarizing graph stats
graph_2: Graph refreshed!
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/0_multi_phase_control
core: Saved C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/_model_0_multi_phase_control
core: Loaded C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/_model_0_Large_L_phase_control
core: Loaded C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/_model_0_Medium_Qprime_control
core: Loaded C:/Users/One of seven/OneDrive/NTNU/TFY4900 Master/Data_b/_model_0_multi_phase_control
GUI: Successfully saved model parameters to F:/AACC/default_model
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
matplotlib.axes._axes: 'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.
